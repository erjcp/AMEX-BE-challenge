const { parentPort } = require('worker_threads');
const mockFetch = require('../utils/mockFetch');

const cachedTokensMap = new Map();

const refreshToken = async (data) => {
  try {
    //Bug in task 1 was here, data.value is undefined, changed to data.key which has the relevant data.
    const refreshedToken = await invokeTokenService(data.key);
    cachedTokensMap.set(data.key, { token: refreshedToken });
  } catch (error) {
    throw error;
  }
}

const invokeTokenService = async (key) => {
  return `${key}-${Date.now()}`;
}

const generateToken = async (data) => {
  console.log('data: ' + JSON.stringify(data.key))
  if (!cachedTokensMap.has(data.key)) {
    const token = await invokeTokenService(data.key);
    cachedTokensMap.set(data.key, { token });
    setTimeout(() => refreshToken(data), 5000);
    return token;
  } else {
    return cachedTokensMap.get(data.key).token;
  }
}
/* 
 - The 'cats' api needs the token which is generated by the 'token' api.
 - Token expires every 7 seconds, 
 - so we refresh token every 5 sec to keep it available before next request.
*/

// Added Logic to validate that a correlationID exists to pass it to the headers, otherwise we generate one based off of Date.now.
// TODO: good idea to base this off of UUID, also need to see why the header doesn't appear in postman, when I log the response here, all the relevant data shows up.

const handleMessage = async (data) => {
  console.log('handling request to get cats');

  let correlationIdResponse = data.correlationId;

  if (!correlationIdResponse) {
    correlationIdResponse = Date.now();
  }


  const token = await generateToken({
    key: 'token-key'
  });
  const response = await mockFetch('cats', token);
  response.headers = {
    'correlationid': correlationIdResponse,
  };
  // Left this log enabled to see the response header in console.
  console.log(response);
  return response;
}
/*
- Process the request from the main thread, and respond back with the data.
*/
parentPort.on('message', async (message) => {
  try {
    const response = await handleMessage(message);
    parentPort.postMessage({ response, requestId: message.requestId });
  } catch (error) {
    console.log('handleResponse error:', error)
    parentPort.postMessage({ response: 'error response from worker1', requestId: message.requestId, });
  }
});